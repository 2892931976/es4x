{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fast, unopinionated, minimalist JavaScript runtime for Vert.x \u00b6 Performance \u00b6 ES4X provides a thin layer of JavaScript, without obscuring Vert.x features that you know and love. Familiar API \u00b6 /// <reference types=\"@vertx/core/runtime\" /> // @ts-check import { Router } from '@vertx/web' ; const app = Router . router ( vertx ); app . route (). handler ( function ( ctx ) { ctx . response (). end ( 'Hello from ES4X Vert.x Web!' ); }); vertx . createHttpServer () . requestHandler ( app ) . listen ( 8080 ); Familiar API for Vert.x developers and type safety provided by TypeScript definitions on all known APIs. DevOps friendly \u00b6 Deploy your applications as a Docker container.","title":"ES4X"},{"location":"#fast-unopinionated-minimalist-javascript-runtime-for-vertx","text":"","title":"Fast, unopinionated, minimalist JavaScript runtime for Vert.x"},{"location":"#performance","text":"ES4X provides a thin layer of JavaScript, without obscuring Vert.x features that you know and love.","title":"Performance"},{"location":"#familiar-api","text":"/// <reference types=\"@vertx/core/runtime\" /> // @ts-check import { Router } from '@vertx/web' ; const app = Router . router ( vertx ); app . route (). handler ( function ( ctx ) { ctx . response (). end ( 'Hello from ES4X Vert.x Web!' ); }); vertx . createHttpServer () . requestHandler ( app ) . listen ( 8080 ); Familiar API for Vert.x developers and type safety provided by TypeScript definitions on all known APIs.","title":"Familiar API"},{"location":"#devops-friendly","text":"Deploy your applications as a Docker container.","title":"DevOps friendly"},{"location":"contributing/","text":"Contributing \u00b6 Interested in contributing to the ES4X? Want to report a bug? Before you do, please read the following guidelines. Submission context \u00b6 Got a question or problem? \u00b6 For quick questions there's no need to open an issue as you can reach us on gitter.im . Found a bug? \u00b6 If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines . Missing a feature? \u00b6 You can request a new feature by submitting an issue to our GitHub Repository. If you would like to implement a new feature, please submit an issue with a proposal for your work first, to be sure that it is of use for everyone, as the Material theme is highly opinionated. Please consider what kind of change it is: For a major feature , first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small features and bugs can be crafted and directly submitted as a Pull Request. However, there is no guarantee that your feature will make it into the master, as it's always a matter of opinion whether if benefits the overall functionality of the theme. Submission guidelines \u00b6 Submitting an issue \u00b6 Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available. We want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using the custom issue template. Please stick to the issue template. Unfortunately we are not able to investigate / fix bugs without a minimal reproduction scenario, so if we don't hear back from you we may close the issue. Submitting a Pull Request (PR) \u00b6 Search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. If you do not find a related issue or PR, go ahead. Development : Fork the project, make your changes in a separate git branch and add descriptive messages to your commits. Build : Before submitting a pull requests, build the project. This is a mandatory requirement for your PR to get accepted, as the theme should at all times be installable through GitHub. Pull Request : After building the theme, commit the compiled output, push your branch to GitHub and send a PR to es4x:develop . If we suggest changes, make the required updates, rebase your branch and push the changes to your GitHub repository, which will automatically update your PR. After your PR is merged, you can safely delete your branch and pull the changes from the main (upstream) repository. Building the world \u00b6 In other to build the world you will need several tools installed in your host environment: GraalVM Apache Maven Node.js NPM If you have GraalVM and Maven installed you might skip the installation of Node.js and NPM although the node binary included with GraalVM is known to have some performance issues with some of npm packages such as TypeScript Compiler . Modules \u00b6 This projects is composed of several main modules/components: es4x the main java code that bootstraps the GraalJS and Vert.x pm the package manager utility codegen the codegen library that will generate the npm package counterparts for vert.x modules generator maven script that generates the npm full package for a given vert.x module docs the directory you're seeing right now. Build the Java part \u00b6 Building the java part is as simple as: mvn -Pcodegen install Use the profile codegen if you want to generate the npm modules too. Otherwise only: es4x pm codegen Are built. Deploying the NPM modules \u00b6 During development you might want to deploy to a local NPM registry, one of these registries you can use is verdaccio . npm install -g verdaccio Once you have it installed follow the instructions to login: npm adduser --registry \"http://localhost:4873\" package upload limits Currently the pm package is quite large and will not be handled by default by verdaccio in order to get the upload to work you will need to update the default config and restart. Edit the file ~/.config/verdaccio/config.yaml and add: # max package size max_body_size : 100mb Once you have a local registry configured you can deploy the npm packages locally: cd generator mvn -Dnpm-registry = \"http://localhost:4873\" \\ clean \\ generate-sources \\ exec:exec@npm-publish API docs If you would like to have API docs for the generated packages then you will need a few extra tools and an extra maven. # install the API doc generator npm install -g typedoc # deploy to verdaccion and generate docs to the docs folder cd generator mvn -Dnpm-registry = \"http://localhost:4873\" \\ clean \\ generate-sources \\ exec:exec@npm-publish \\ exec:exec@typedoc Deploy PM to npm \u00b6 For convenience, the pm project can also be deployed to the NPM registry, in order to achieve this: cd pm mvn package ./publish This will generate the maven fat jar and the final script will convert it to a npm package and deploy to your local verdaccio installation.","title":"Contributing"},{"location":"contributing/#contributing","text":"Interested in contributing to the ES4X? Want to report a bug? Before you do, please read the following guidelines.","title":"Contributing"},{"location":"contributing/#submission-context","text":"","title":"Submission context"},{"location":"contributing/#got-a-question-or-problem","text":"For quick questions there's no need to open an issue as you can reach us on gitter.im .","title":"Got a question or problem?"},{"location":"contributing/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines .","title":"Found a bug?"},{"location":"contributing/#missing-a-feature","text":"You can request a new feature by submitting an issue to our GitHub Repository. If you would like to implement a new feature, please submit an issue with a proposal for your work first, to be sure that it is of use for everyone, as the Material theme is highly opinionated. Please consider what kind of change it is: For a major feature , first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small features and bugs can be crafted and directly submitted as a Pull Request. However, there is no guarantee that your feature will make it into the master, as it's always a matter of opinion whether if benefits the overall functionality of the theme.","title":"Missing a feature?"},{"location":"contributing/#submission-guidelines","text":"","title":"Submission guidelines"},{"location":"contributing/#submitting-an-issue","text":"Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available. We want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using the custom issue template. Please stick to the issue template. Unfortunately we are not able to investigate / fix bugs without a minimal reproduction scenario, so if we don't hear back from you we may close the issue.","title":"Submitting an issue"},{"location":"contributing/#submitting-a-pull-request-pr","text":"Search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. If you do not find a related issue or PR, go ahead. Development : Fork the project, make your changes in a separate git branch and add descriptive messages to your commits. Build : Before submitting a pull requests, build the project. This is a mandatory requirement for your PR to get accepted, as the theme should at all times be installable through GitHub. Pull Request : After building the theme, commit the compiled output, push your branch to GitHub and send a PR to es4x:develop . If we suggest changes, make the required updates, rebase your branch and push the changes to your GitHub repository, which will automatically update your PR. After your PR is merged, you can safely delete your branch and pull the changes from the main (upstream) repository.","title":"Submitting a Pull Request (PR)"},{"location":"contributing/#building-the-world","text":"In other to build the world you will need several tools installed in your host environment: GraalVM Apache Maven Node.js NPM If you have GraalVM and Maven installed you might skip the installation of Node.js and NPM although the node binary included with GraalVM is known to have some performance issues with some of npm packages such as TypeScript Compiler .","title":"Building the world"},{"location":"contributing/#modules","text":"This projects is composed of several main modules/components: es4x the main java code that bootstraps the GraalJS and Vert.x pm the package manager utility codegen the codegen library that will generate the npm package counterparts for vert.x modules generator maven script that generates the npm full package for a given vert.x module docs the directory you're seeing right now.","title":"Modules"},{"location":"contributing/#build-the-java-part","text":"Building the java part is as simple as: mvn -Pcodegen install Use the profile codegen if you want to generate the npm modules too. Otherwise only: es4x pm codegen Are built.","title":"Build the Java part"},{"location":"contributing/#deploying-the-npm-modules","text":"During development you might want to deploy to a local NPM registry, one of these registries you can use is verdaccio . npm install -g verdaccio Once you have it installed follow the instructions to login: npm adduser --registry \"http://localhost:4873\" package upload limits Currently the pm package is quite large and will not be handled by default by verdaccio in order to get the upload to work you will need to update the default config and restart. Edit the file ~/.config/verdaccio/config.yaml and add: # max package size max_body_size : 100mb Once you have a local registry configured you can deploy the npm packages locally: cd generator mvn -Dnpm-registry = \"http://localhost:4873\" \\ clean \\ generate-sources \\ exec:exec@npm-publish API docs If you would like to have API docs for the generated packages then you will need a few extra tools and an extra maven. # install the API doc generator npm install -g typedoc # deploy to verdaccion and generate docs to the docs folder cd generator mvn -Dnpm-registry = \"http://localhost:4873\" \\ clean \\ generate-sources \\ exec:exec@npm-publish \\ exec:exec@typedoc","title":"Deploying the NPM modules"},{"location":"contributing/#deploy-pm-to-npm","text":"For convenience, the pm project can also be deployed to the NPM registry, in order to achieve this: cd pm mvn package ./publish This will generate the maven fat jar and the final script will convert it to a npm package and deploy to your local verdaccio installation.","title":"Deploy PM to npm"},{"location":"license/","text":"Apache License \u00b6 Version 2.0, January 2004 < http://www.apache.org/licenses/ > Terms and Conditions for use, reproduction, and distribution \u00b6 1. Definitions \u00b6 \u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u201ccontrol\u201d means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising permissions granted by this License. \u201cSource\u201d form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \u201cObject\u201d form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \u201cContribution\u201d shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u201csubmitted\u201d means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u201cNot a Contribution.\u201d \u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License \u00b6 Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License \u00b6 Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution \u00b6 You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and \u00a9 You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions \u00b6 Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks \u00b6 This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty \u00b6 Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability \u00b6 In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability \u00b6 While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work \u00b6 To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets [] replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u201cprinted page\u201d as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"license/#apache-license","text":"Version 2.0, January 2004 < http://www.apache.org/licenses/ >","title":"Apache License"},{"location":"license/#terms-and-conditions-for-use-reproduction-and-distribution","text":"","title":"Terms and Conditions for use, reproduction, and distribution"},{"location":"license/#1-definitions","text":"\u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u201ccontrol\u201d means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising permissions granted by this License. \u201cSource\u201d form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \u201cObject\u201d form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \u201cContribution\u201d shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u201csubmitted\u201d means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u201cNot a Contribution.\u201d \u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.","title":"1. Definitions"},{"location":"license/#2-grant-of-copyright-license","text":"Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.","title":"2. Grant of Copyright License"},{"location":"license/#3-grant-of-patent-license","text":"Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.","title":"3. Grant of Patent License"},{"location":"license/#4-redistribution","text":"You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and \u00a9 You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.","title":"4. Redistribution"},{"location":"license/#5-submission-of-contributions","text":"Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.","title":"5. Submission of Contributions"},{"location":"license/#6-trademarks","text":"This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.","title":"6. Trademarks"},{"location":"license/#7-disclaimer-of-warranty","text":"Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.","title":"7. Disclaimer of Warranty"},{"location":"license/#8-limitation-of-liability","text":"In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.","title":"8. Limitation of Liability"},{"location":"license/#9-accepting-warranty-or-additional-liability","text":"While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"9. Accepting Warranty or Additional Liability"},{"location":"license/#appendix-how-to-apply-the-apache-license-to-your-work","text":"To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets [] replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u201cprinted page\u201d as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"APPENDIX: How to apply the Apache License to your work"},{"location":"advanced/async-programming/","text":"Imagine the following piece of code: function one () { two ( function ( err ) { if ( err ) throw err ; console . log ( \"two finished\" ); }); } function two ( callback ) { setTimeout ( function () { three ( function ( err ) { if ( err ) return callback ( err ); console . log ( \"three finished\" ); callback (); }); }, 0 ); } function three ( callback ) { setTimeout ( function () { four ( function ( err ) { if ( err ) return callback ( err ); console . log ( \"four finished\" ); callback (); }); }, 0 ); } function four ( callback ) { setTimeout ( function (){ callback ( new Error ()); }, 0 ); } one (); If you run this code you will see that your error has the following trace: Error at Timer.callback (example.js:34) Which is not very useful if you need to debug. In order to ease this there is a bundled module with ES4X that will stitch your exceptions together, every time you would handle a callback instead of passing the error directly you wrap it with a helper function. var asyncError = require ( 'async-error' ); var fs = vertx . fileSystem (); function one () { two ( function ( err ) { if ( err ) { console . trace ( err ); test . complete (); return ; } console . log ( \"two finished\" ); should . fail ( \"Should not reach here\" ); }); } function two ( callback ) { setTimeout ( function () { three ( function ( err ) { if ( err ) { setTimeout ( function () { callback ( asyncError ( err )); }, 0 ); return ; } console . log ( \"three finished\" ); callback (); }); }, 0 ); } function three ( callback ) { setTimeout ( function () { four ( function ( err ) { if ( err ) { setTimeout ( function () { callback ( asyncError ( err )); }, 0 ); return ; } console . log ( \"four finished\" ); callback (); }); }, 0 ); } function four ( callback ) { setTimeout ( function () { fs . readFile ( \"durpa/durp.txt\" , function ( ar ) { if ( ar . failed ()) { callback ( asyncError ( ar )); } }); }, 0 ); } one (); Knowing that the file durpa/durp.txt doesn't exist, now you would see: Error: File not found! at stacktraces/jserror.js:24:20 at stacktraces/jserror.js:40:20 at stacktraces/jserror.js:53:14 at stacktraces/jserror.js:53:25 at classpath:io/reactiverse/es4x/polyfill/global.js:25:18 If the error that is being propagated in a JS Error object or: io.vertx.core.file.FileSystemException: java.nio.file.NoSuchFileException: durpa/durp.txt at <async>.<anonymous> (stacktraces/index.js:30) at <async>.<anonymous> (stacktraces/index.js:46) at <async>.<anonymous> (stacktraces/index.js:61) at io.vertx.core.file.impl.FileSystemImpl$13.perform(FileSystemImpl.java:740) at io.vertx.core.file.impl.FileSystemImpl$13.perform(FileSystemImpl.java:732) at io.vertx.core.impl.ContextImpl.lambda$executeBlocking$1(ContextImpl.java:275) at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.lang.Thread.run(Thread.java:748) Caused by: java.nio.file.NoSuchFileException: durpa/durp.txt at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102) at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107) at sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214) at java.nio.file.Files.newByteChannel(Files.java:361) at java.nio.file.Files.newByteChannel(Files.java:407) at java.nio.file.Files.readAllBytes(Files.java:3152) at io.vertx.core.file.impl.FileSystemImpl$13.perform(FileSystemImpl.java:736) ... 7 more If the error is a Java Throwable.","title":"Asynchronous Programming"},{"location":"advanced/graalvm/","text":"ES4X has GraalVM support. The same code will run either in interpreted mode on Java 8/11 and OpenJ9 or compiled mode on JDK >= 11 (with JVMCI support) or GraalJS. There are benefits on using GraalJS namely the updated language support >=ES6 and support out of the box for generators, promises, etc.... Java intertop follows the exact class/method name from Java. For example, the usage of property names to refer to getters and setters, must use the getter and setter . For example: class Hello { private String name ; public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } } When using this Java Object from Graal, this will not work: var hello = new Hello (); // get the name var name = hello . name ; // FAIL // set the name hello . name = 'Paulo' ; // FAIL This is not valid in Graal and should be: var hello = new Hello (); // get the name var name = hello . getName (); // set the name hello . setName ( 'Paulo' ); GraalJS will not allow multi thread access to the same script context. If there is a need to work with multiple threads, then consider looking at the Worker API . Native Images \u00b6 Currently you cannot generate native images with ES4X, the limitation is because the static analysis of the AOT compiler will not take in consideration the java code invoked from the script (so classes won't be available), plus the fact that the compiler has no support for jvm interop at runtime. There is work in progress in this are so it might be possible in the future.","title":"GraalVM"},{"location":"advanced/graalvm/#native-images","text":"Currently you cannot generate native images with ES4X, the limitation is because the static analysis of the AOT compiler will not take in consideration the java code invoked from the script (so classes won't be available), plus the fact that the compiler has no support for jvm interop at runtime. There is work in progress in this are so it might be possible in the future.","title":"Native Images"},{"location":"advanced/worker/","text":"MDN defines Web Workers as: Web Workers is a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. ES4X is not a Browser and does not concern about user interface, however you can also run long running jobs on the server side. In Vert.x everything is non blocking so even creating workers should follow the same semantics, for this reason we cannot fully strict follow the worker interface but we replace the constructor with a factory function. Imagine that in your code you need to run a CPU intensive task, you shouldn't block the event loop, so the logic step is to use vert.x worker verticles. Worker API can be mapped to Vert.x API with some small nuances. Example Worker \u00b6 Imagine the following worker code: // Get a reference to the Thread class to cause some blocking... const Thread = Java . type ( 'java.lang.Thread' ); // The worker context is referenced by the variable `self` like on the MDN docs self . onmessage = function ( e ) { console . log ( 'Message received from main script, will sleep 5 seconds...' ); // Cause some havok in the event loop Thread . sleep ( 5 * 1000 ); var workerResult = 'Result: ' + ( e . data [ 0 ] * e . data [ 1 ]); console . log ( 'Posting message back to main script' ); // return data back to the main verticle postMessage ( workerResult ); }; What needs to be known \u00b6 Workers are loaded in a seperate context so you can't share functions from the main verticle and worker, all communication works with message passing (eventbus) using: postMessage() sends a message to the other side onmessage receives a message from the other side Verticle side \u00b6 The verticle side of the API allows you to receive errors and terminate() workers, while the worker it self can't. Example Verticle \u00b6 Worker . create ( 'workers/worker.js' , function ( create ) { if ( create . succeeded ()) { var worker = create . result (); worker . onmessage = function ( msg ) { console . log ( 'onmessage: ' + msg ); }; worker . onerror = function ( err ) { console . err ( err ); // terminate the worker worker . terminate (); }; console . log ( 'posting...' ); worker . postMessage ({ data : [ 2 , 3 ]}); } }); So the code that would be not allowed to run on the event loop Thread.sleep(5000) is now running on a worker thread leaving the event loop thread free for all the other IO tasks. Polyglot Workers \u00b6 It is still possible to write workers that are not JavaScript workers. Workers must follow a very small list of rules: Workers must register the address: {deploymentId}.out to receive messages from the main script. Workers should send messages to: {deploymentId}.in to send messages to the main script. Message payloads are expected to be JSON.stringify(message) to avoid any issues between languages Workers are expected to be local, if want to connect to a worker anywhere in the cluster, then you need to use the constructor with an extra argument true , e.g.: new Worker('deploymentId', true) .","title":"Workers"},{"location":"advanced/worker/#example-worker","text":"Imagine the following worker code: // Get a reference to the Thread class to cause some blocking... const Thread = Java . type ( 'java.lang.Thread' ); // The worker context is referenced by the variable `self` like on the MDN docs self . onmessage = function ( e ) { console . log ( 'Message received from main script, will sleep 5 seconds...' ); // Cause some havok in the event loop Thread . sleep ( 5 * 1000 ); var workerResult = 'Result: ' + ( e . data [ 0 ] * e . data [ 1 ]); console . log ( 'Posting message back to main script' ); // return data back to the main verticle postMessage ( workerResult ); };","title":"Example Worker"},{"location":"advanced/worker/#what-needs-to-be-known","text":"Workers are loaded in a seperate context so you can't share functions from the main verticle and worker, all communication works with message passing (eventbus) using: postMessage() sends a message to the other side onmessage receives a message from the other side","title":"What needs to be known"},{"location":"advanced/worker/#verticle-side","text":"The verticle side of the API allows you to receive errors and terminate() workers, while the worker it self can't.","title":"Verticle side"},{"location":"advanced/worker/#example-verticle","text":"Worker . create ( 'workers/worker.js' , function ( create ) { if ( create . succeeded ()) { var worker = create . result (); worker . onmessage = function ( msg ) { console . log ( 'onmessage: ' + msg ); }; worker . onerror = function ( err ) { console . err ( err ); // terminate the worker worker . terminate (); }; console . log ( 'posting...' ); worker . postMessage ({ data : [ 2 , 3 ]}); } }); So the code that would be not allowed to run on the event loop Thread.sleep(5000) is now running on a worker thread leaving the event loop thread free for all the other IO tasks.","title":"Example Verticle"},{"location":"advanced/worker/#polyglot-workers","text":"It is still possible to write workers that are not JavaScript workers. Workers must follow a very small list of rules: Workers must register the address: {deploymentId}.out to receive messages from the main script. Workers should send messages to: {deploymentId}.in to send messages to the main script. Message payloads are expected to be JSON.stringify(message) to avoid any issues between languages Workers are expected to be local, if want to connect to a worker anywhere in the cluster, then you need to use the constructor with an extra argument true , e.g.: new Worker('deploymentId', true) .","title":"Polyglot Workers"},{"location":"api/reactiverse/","text":"reactive-pg-client elasticsearch-client","title":"@reactiverse"},{"location":"api/vertx/","text":"core amqp-bridge auth-common auth-digest auth-jdbc auth-jwt auth-mongo auth-oauth2 auth-shiro bridge-common camel-bridge circuit-breaker cofig-redis config config-consul config-git config-hocon config-kubernetes-configmap config-spring-config-server config-vault config-yaml config-zookeeper consul-client dropwizard-metrics hawkular-metrics health-check jdbc-client kafka-client mail-client mongo-client mysql-postgresql-client rabbitmq-client redis-client service-discovery service-discovery-backend-consul service-discovery-backend-redis service-discovery-backend-zookeeper service-discovery-bridge-consul service-discovery-bridge-docker service-discovery-bridge-docker-links service-discovery-bridge-kubernetes service-discovery-bridge-zookeeper shell sql-common stomp tcp-eventbus-bridge unit vertx-mqtt web web-api-contract web-client web-common","title":"@vertx"},{"location":"guide/debug/","text":"Chrome Inspector \u00b6 When working on GraalVM or a JDK with the graalvm (JVMCI) bits, start your application as: npm start -- --inspector = 9229 This will start a Chrome inspector debugger agent on port 9229 that you can attach for a remote debug session from your Browser. Chrome devtools listening at port: 9229 Running: java ... Debugger listening on port 9229. To start debugging, open the following URL in Chrome: chrome-devtools://devtools/bundled/js_app.html?ws=127.0.0.1:9229/436e852b-329b5c44c3e Server listening at: http://localhost:8080/ You will be able to set breakpoints, debug etc... Debug from VSCode \u00b6 The usage of Chrome devtools is not a hard requirement. You can also debug the application using Visual Studio Code . Create a runner configuration as: es4x vscode This will create a launcher.json similar to this: { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Launch empty-project\" , \"type\" : \"node\" , \"request\" : \"launch\" , \"cwd\" : \"${workspaceFolder}\" , \"runtimeExecutable\" : \"${workspaceFolder}/node_modules/.bin/es4x-launcher\" , \"runtimeArgs\" : [ \"--inspect=5858\" ], \"port\" : 5858 , \"outputCapture\" : \"std\" , \"serverReadyAction\" : { \"pattern\" : \"started on port ([0-9]+)\" , \"uriFormat\" : \"http://localhost:%s\" , \"action\" : \"openExternally\" } } ] } And attach your debugger. If you print the message Server started on port 8000 it will be captured by visual studio and a browser window will open the url in question.","title":"Debugging"},{"location":"guide/debug/#chrome-inspector","text":"When working on GraalVM or a JDK with the graalvm (JVMCI) bits, start your application as: npm start -- --inspector = 9229 This will start a Chrome inspector debugger agent on port 9229 that you can attach for a remote debug session from your Browser. Chrome devtools listening at port: 9229 Running: java ... Debugger listening on port 9229. To start debugging, open the following URL in Chrome: chrome-devtools://devtools/bundled/js_app.html?ws=127.0.0.1:9229/436e852b-329b5c44c3e Server listening at: http://localhost:8080/ You will be able to set breakpoints, debug etc...","title":"Chrome Inspector"},{"location":"guide/debug/#debug-from-vscode","text":"The usage of Chrome devtools is not a hard requirement. You can also debug the application using Visual Studio Code . Create a runner configuration as: es4x vscode This will create a launcher.json similar to this: { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Launch empty-project\" , \"type\" : \"node\" , \"request\" : \"launch\" , \"cwd\" : \"${workspaceFolder}\" , \"runtimeExecutable\" : \"${workspaceFolder}/node_modules/.bin/es4x-launcher\" , \"runtimeArgs\" : [ \"--inspect=5858\" ], \"port\" : 5858 , \"outputCapture\" : \"std\" , \"serverReadyAction\" : { \"pattern\" : \"started on port ([0-9]+)\" , \"uriFormat\" : \"http://localhost:%s\" , \"action\" : \"openExternally\" } } ] } And attach your debugger. If you print the message Server started on port 8000 it will be captured by visual studio and a browser window will open the url in question.","title":"Debug from VSCode"},{"location":"guide/package/","text":"Packaging applications should follow the NPM style: npm pack npm pack will produce a TGZ with your application which you can move to other location. However applications can also be published to a NPM registry. It is important to notice that in order to work with published/packed the target environment needs to have access to the package es4x-pm as it will be required to install the java bits. Docker \u00b6 Docker images can also be created for you for. es4x dockerfile This will produce a simple dockerfile that you can customize to your needs, by default the file will be a 3 stage build. On the first stage node is used to install all NPM dependencies On the second stage java is used to install the Maven dependencies On the final stage the GraalVM image is used to run the application By default oracle/graalvm-ce docker image is used, but it can be replace with any other JDK image (please prefer versions 11 or above) with support for JVMCI. docker build . -arg BASEIMAGE = openjdk:11 JLink \u00b6 Java 11 supports jlink . You can use the jlink tool to assemble and optimize a set of modules and their dependencies into a custom runtime image. es4x jlink This will produce a optimized runtime, which means it can be used instead of relying on a full JDK installation. As comparision, a hello world application will produce a runtime weighting about 80Mb , while a full JDK installation requires around 200Mb . This feature can be using in colaboration with Dockerfile . Instead of using the graal base image, use the OpenJDK base image. Then on the second stage, run jlink: # Second stage (build the JVM related code) FROM openjdk:11 AS JVM ARG ES4X_VERSION = ${ project .version } # force es4x maven resolution only to consider production dependencies ENV ES4X_ENV=production # Copy the previous build step COPY --from = NPM /usr/src/app /usr/src/app # use the copied workspace WORKDIR /usr/src/app # Download the ES4X runtime tool RUN curl -sL https://github.com/reactiverse/es4x/releases/download/ ${ ES4X_VERSION } /es4x-pm- ${ ES4X_VERSION } -bin.tar.gz | \\ tar zx --strip-components = 1 -C /usr/local # Install the Java Dependencies RUN es4x install -f # Create the optimized runtime RUN es4x jlink -t /usr/local This will produce the optimized runtime to jre, which can be used with a small base image for the final stage: FROM debian:slim # Collect the jars from the previous step COPY --from = JVM /usr/local /usr/local COPY --from = JVM /usr/src/app /usr/src/app # use the copied workspace WORKDIR /usr/src/app # Bundle app source COPY . . # Define custom java options for containers ENV JAVA_OPTS=\"-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+UseContainerSupport\" # define the entrypoint ENTRYPOINT [ \"./node_modules/.bin/es4x-launcher\" ] This will produce a small final image but a larger layer as you're packaging the optimized runtime too.","title":"Packaging"},{"location":"guide/package/#docker","text":"Docker images can also be created for you for. es4x dockerfile This will produce a simple dockerfile that you can customize to your needs, by default the file will be a 3 stage build. On the first stage node is used to install all NPM dependencies On the second stage java is used to install the Maven dependencies On the final stage the GraalVM image is used to run the application By default oracle/graalvm-ce docker image is used, but it can be replace with any other JDK image (please prefer versions 11 or above) with support for JVMCI. docker build . -arg BASEIMAGE = openjdk:11","title":"Docker"},{"location":"guide/package/#jlink","text":"Java 11 supports jlink . You can use the jlink tool to assemble and optimize a set of modules and their dependencies into a custom runtime image. es4x jlink This will produce a optimized runtime, which means it can be used instead of relying on a full JDK installation. As comparision, a hello world application will produce a runtime weighting about 80Mb , while a full JDK installation requires around 200Mb . This feature can be using in colaboration with Dockerfile . Instead of using the graal base image, use the OpenJDK base image. Then on the second stage, run jlink: # Second stage (build the JVM related code) FROM openjdk:11 AS JVM ARG ES4X_VERSION = ${ project .version } # force es4x maven resolution only to consider production dependencies ENV ES4X_ENV=production # Copy the previous build step COPY --from = NPM /usr/src/app /usr/src/app # use the copied workspace WORKDIR /usr/src/app # Download the ES4X runtime tool RUN curl -sL https://github.com/reactiverse/es4x/releases/download/ ${ ES4X_VERSION } /es4x-pm- ${ ES4X_VERSION } -bin.tar.gz | \\ tar zx --strip-components = 1 -C /usr/local # Install the Java Dependencies RUN es4x install -f # Create the optimized runtime RUN es4x jlink -t /usr/local This will produce the optimized runtime to jre, which can be used with a small base image for the final stage: FROM debian:slim # Collect the jars from the previous step COPY --from = JVM /usr/local /usr/local COPY --from = JVM /usr/src/app /usr/src/app # use the copied workspace WORKDIR /usr/src/app # Bundle app source COPY . . # Define custom java options for containers ENV JAVA_OPTS=\"-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+UseContainerSupport\" # define the entrypoint ENTRYPOINT [ \"./node_modules/.bin/es4x-launcher\" ] This will produce a small final image but a larger layer as you're packaging the optimized runtime too.","title":"JLink"},{"location":"guide/run/","text":"Since the package es4x-cli is added to the project and the scripts section is using it, running your application is as simple as: > npm start This command replaces the default npm operation by running the application on the JVM runtime. Server listening at: http://localhost:8080/ Succeeded in deploying verticle You can now interact with the application with a browser or a http client: > curl localhost:8080 Hello from Vert.x Web! To pass arguments use the double dash -- notation and all arguments after will be provided as is to the running application.","title":"Running"},{"location":"guide/shell/","text":"There are situations where having a REPL or shell can be useful. ES4X provides such a feature out of the box by running the command: > npm run \"js:>\" js:> And you are now able to REPL. For example: js:> require('./index.js'); Server listening at: http://localhost:8080/ js:> The shell can also be run without the need of npm using a packaged runnable jar. java -jar your-package.jar run \"js:>\" A bootstrapped shell will be available to run your code with all the components available in your classpath.","title":"Shell"},{"location":"guide/test/","text":"In order to test code a test framework should be added to the project, since vert.x provides vert.x unit , we can add it easily with: npm install @vertx/unit --save-dev npm install Writing test \u00b6 Writing tests should follow the same rules as any other JavaScript code, a common convention is to use the suffix .test.js to test the code from the base script. When working with vert.x unit , tests should be organized in suites and a main suite should be used to start the testing process. For example: import { TestSuite } from '@vertx/unit' ; const suite = TestSuite . create ( \"the_test_suite\" ); suite . test ( \"my_test_case\" , function ( context ) { var s = \"value\" ; context . assertEquals ( \"value\" , s ); }); suite . run (); Running \u00b6 > npm test This command replaces the default npm operation by running the application on the JVM runtime. Running: java ... Begin test suite the_test_suite Begin test my_test_case Passed my_test_case End test suite the_test_suite , run: 1 , Failures: 0 , Errors: 0","title":"Testing"},{"location":"guide/test/#writing-test","text":"Writing tests should follow the same rules as any other JavaScript code, a common convention is to use the suffix .test.js to test the code from the base script. When working with vert.x unit , tests should be organized in suites and a main suite should be used to start the testing process. For example: import { TestSuite } from '@vertx/unit' ; const suite = TestSuite . create ( \"the_test_suite\" ); suite . test ( \"my_test_case\" , function ( context ) { var s = \"value\" ; context . assertEquals ( \"value\" , s ); }); suite . run ();","title":"Writing test"},{"location":"guide/test/#running","text":"> npm test This command replaces the default npm operation by running the application on the JVM runtime. Running: java ... Begin test suite the_test_suite Begin test my_test_case Passed my_test_case End test suite the_test_suite , run: 1 , Failures: 0 , Errors: 0","title":"Running"},{"location":"resources/","text":"Community Projects \u00b6 GraphQL \u00b6 vertx-graphql Create a GraphQL HTTP server with ES4X, a fast, unopinionated, minimalist JavaScript runtime for Vert.x. /// <reference types=\"@vertx/core/runtime\" /> // @ts-check import { Router } from '@vertx/web' ; import { GraphQLServer } from 'vertx-graphql' ; const typeDefs = ` type Query { hello: String } ` ; const resolvers = { Query : { hello : () => 'Hello vertx-graphql!' } }; const server = new GraphQLServer ({ typeDefs , resolvers , context : {} }); const app = Router . router ( vertx ); server . applyMiddleware ({ app , path : '/graphql' }); const port = 9100 ; const host = '0.0.0.0' ; vertx . createHttpServer () . requestHandler ( app ) . listen ( port , host , listen => { if ( listen . failed ()) { console . log ( `\ud83d\ude80 GraphQL ready at http:// ${ host } : ${ port }${ server . graphqlPath } ` ) } else { console . log ( 'Failed to bind!' ); } });","title":"Resources"},{"location":"resources/#community-projects","text":"","title":"Community Projects"},{"location":"resources/#graphql","text":"vertx-graphql Create a GraphQL HTTP server with ES4X, a fast, unopinionated, minimalist JavaScript runtime for Vert.x. /// <reference types=\"@vertx/core/runtime\" /> // @ts-check import { Router } from '@vertx/web' ; import { GraphQLServer } from 'vertx-graphql' ; const typeDefs = ` type Query { hello: String } ` ; const resolvers = { Query : { hello : () => 'Hello vertx-graphql!' } }; const server = new GraphQLServer ({ typeDefs , resolvers , context : {} }); const app = Router . router ( vertx ); server . applyMiddleware ({ app , path : '/graphql' }); const port = 9100 ; const host = '0.0.0.0' ; vertx . createHttpServer () . requestHandler ( app ) . listen ( port , host , listen => { if ( listen . failed ()) { console . log ( `\ud83d\ude80 GraphQL ready at http:// ${ host } : ${ port }${ server . graphqlPath } ` ) } else { console . log ( 'Failed to bind!' ); } });","title":"GraphQL"},{"location":"start/FAQ/","text":"TODO \u00b6 to edit this page click on the pencil icon.","title":"FAQ"},{"location":"start/FAQ/#todo","text":"to edit this page click on the pencil icon.","title":"TODO"},{"location":"start/generator/","text":"create-vertx-app \u00b6 With the create-vertx-app you can quickly bootstrap your ES4X TypeScript or JavaScript application with a new keystrokes. If GUI is the preferred way to create applications, then the same generator can be used as a PWA .","title":"Generator"},{"location":"start/generator/#create-vertx-app","text":"With the create-vertx-app you can quickly bootstrap your ES4X TypeScript or JavaScript application with a new keystrokes. If GUI is the preferred way to create applications, then the same generator can be used as a PWA .","title":"create-vertx-app"},{"location":"start/hello-world/","text":"/// <reference types=\"@vertx/core/runtime\" /> // @ts-check import { Router } from '@vertx/web' ; const app = Router . router ( vertx ); app . route ( '/' ). handler ( function ( ctx ) { ctx . response (). end ( 'Hello from Vert.x Web!' ); }); vertx . createHttpServer () . requestHandler ( app ) . listen ( 8080 ); This app starts a server and listens on port 8080 for connections. The app responds with \u201c Hello from Vert.x Web! \u201d for requests to the root URL ( / ) or route. For every other path, it will respond with a 404 Not Found . Running locally \u00b6 First create a directory named myapp , change to it and run npm init . Then install es4x as per the installation guide . In the myapp directory, create a file named app.js and copy in the code from the example above. Run the app with the following command: npm start Then, load http://localhost:8080/ in a browser to see the output.","title":"Hello World"},{"location":"start/hello-world/#running-locally","text":"First create a directory named myapp , change to it and run npm init . Then install es4x as per the installation guide . In the myapp directory, create a file named app.js and copy in the code from the example above. Run the app with the following command: npm start Then, load http://localhost:8080/ in a browser to see the output.","title":"Running locally"},{"location":"start/install/","text":"Assuming you\u2019ve already installed Node.js and ( Java or GraalVM [Preferred]), install the project management utilities development tool: npm install -g es4x-pm # If you prefer not using NPM you can download the # package and add the bin directory to the PATH ES4X_VERSION = 0 .8.0 \\ curl -sL https://github.com/reactiverse/es4x/releases/download/ ${ ES4X_VERSION } /es4x-pm- ${ ES4X_VERSION } -bin.tar.gz \\ | tar zx --strip-components = 1 -C /usr/local You should now have a es4x command available in your path, you can test it by running: $ es4x --help Usage: java -jar /usr/local/bin/es4x-bin.jar [ COMMAND ] [ OPTIONS ] [ arg... ] Commands: bare Creates a bare instance of vert.x. dockerfile Creates a generic Dockerfile for building and deploying the current project. init Initializes the 'package.json' to work with ES4X. install Installs required jars from maven to 'node_modules' . list List vert.x applications run Runs a JS script called <main-verticle> in its own instance of vert.x. start Start a vert.x application in background stop Stop a vert.x application version Displays the version. Run 'java -jar /usr/local/bin/es4x-bin.jar COMMAND --help' for more information on a command. Create a directory to hold your application, and make that your working directory. mkdir myapp cd myapp Use the npm init command to create a package.json file for your application. For more information on how package.json works, see Specifics of npm\u2019s package.json handling . npm init This command prompts you for a number of things, such as the name and version of your application. For now, you can simply hit RETURN to accept the defaults for most of them, with the following exception: entry point: (index.js) Enter app.js , or whatever you want the name of the main file to be. If you want it to be index.js , hit RETURN to accept the suggested default file name. Update the package.json to accomodate the ES4X scripts in the myapp directory. For example: es4x init Now install @vertx/core and optionally @vertx/web and @vertx/unit dependencies by adding them to the package.json or running the command: npm install @vertx/unit --save-dev npm install @vertx/core --save-prod npm install @vertx/web --save-prod npm install As this moment there should be a minimal package.json .","title":"Installing"}]}